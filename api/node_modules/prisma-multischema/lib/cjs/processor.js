"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.processSubschemas = exports.getAllFiles = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const node_events_1 = require("node:events");
const process_1 = require("process");
const logger_1 = require("./logger");
const prismaUnify_1 = require("./prismaUnify");
const readline_1 = require("readline");
;
const matchString = '^( )*//(/)*';
const regExp = new RegExp(matchString);
/**
 *  allSchemaFolder: path to subschemas from src directory
 *  @DoNotChange mainSchemaPrismaPath : path to main schema.prisma
 *  prisma accepts schema.prisma from 'src/prisma/schema.prisma' file.
 *  @Change if you know to handle
*/
const getAllFiles = function (dirPath, arrayOfFiles) {
    try {
        const files = fs.readdirSync(dirPath);
        files.forEach(function (file) {
            if (fs.statSync(dirPath + "/" + file).isDirectory()) {
                arrayOfFiles = (0, exports.getAllFiles)(dirPath + "/" + file, arrayOfFiles);
            }
            else {
                arrayOfFiles.push(path.join(dirPath.toString(), "/", file));
            }
        });
        return arrayOfFiles;
    }
    catch (error) {
        (0, logger_1.errorLogs)(prismaUnify_1.subschemasPath);
        (0, process_1.exit)(0);
    }
};
exports.getAllFiles = getAllFiles;
function processSubschemas(result, logStream) {
    var _a, result_1, result_1_1;
    var _b, e_1, _c, _d;
    return __awaiter(this, void 0, void 0, function* () {
        try {
            for (_a = true, result_1 = __asyncValues(result); result_1_1 = yield result_1.next(), _b = result_1_1.done, !_b;) {
                _d = result_1_1.value;
                _a = false;
                try {
                    const file = _d;
                    try {
                        const data = fs.readFileSync(file, 'utf8');
                        //console.log('DATA', path.extname(file));
                        if (data.search(/\/\/#exclude/g) === -1 && path.extname(file) == ".prisma") {
                            if (data.search(/datasource(\w|\s)*{/g) != -1 && data.search(/generator(\w|\s)*{/g) != -1) {
                                fs.writeFileSync(path.join('temp.prisma'), '', { flag: 'w+' });
                                yield processLineByLine(file, logStream, 1);
                                const temp = fs.readFileSync('temp.prisma', { encoding: 'utf8', flag: 'r' });
                                fs.writeFileSync(file, logger_1.generatedComment + temp, { flag: 'w+' });
                                fs.unlinkSync('temp.prisma');
                            }
                            else
                                yield processLineByLine(file, logStream);
                        }
                    }
                    catch (err) {
                        console.error(err);
                    }
                }
                finally {
                    _a = true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (!_a && !_b && (_c = result_1.return)) yield _c.call(result_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    });
}
exports.processSubschemas = processSubschemas;
function processLineByLine(filePath, writeMain, writeCase = 0, sourceFilePath = '') {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const rl = (0, readline_1.createInterface)({
                input: fs.createReadStream(filePath),
                crlfDelay: Infinity,
            });
            rl.on('line', (line) => __awaiter(this, void 0, void 0, function* () {
                switch (writeCase) {
                    case 0:
                        if (line.search(/import(\s)*{[\s| \w|,]*}(\s)*from/g) === -1) {
                            writeMain.write(line);
                            writeMain.write('\n');
                        }
                        break;
                    case 1:
                        if (line.search('binaryTargets') == -1 && line != '\n' && line != "" && logger_1.generatedComment.search(line) != -1) {
                            /// When find Generated Comment from Base.prisma ignore line processing
                        }
                        else if (regExp.test(line)) {
                            let startInd = 0;
                            for (startInd = 0; startInd < line.length; startInd++) {
                                if (line.at(startInd) != '/' && line.at(startInd) != ' ')
                                    break;
                            }
                            writeMain.write(line.substring(startInd) + '\n');
                            fs.writeFileSync('temp.prisma', line + '\n', { flag: 'a' });
                        }
                        else {
                            writeMain.write(line + '\n');
                            fs.writeFileSync('temp.prisma', '//' + line + '\n', { flag: 'a' });
                        }
                        break;
                }
            }));
            yield (0, node_events_1.once)(rl, 'close');
        }
        catch (err) {
            console.error(err);
        }
    });
}
;
