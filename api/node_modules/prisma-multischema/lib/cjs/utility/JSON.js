"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkJSON = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const checkJSON = function () {
    const packageJsonPath = path.join(process.cwd(), 'package.json');
    fs.readFile(packageJsonPath, 'utf8', (err, data) => {
        if (err) {
            console.error('Error reading package.json:', err);
            return;
        }
        let packageJson;
        try {
            packageJson = JSON.parse(data);
        }
        catch (parseError) {
            console.error('Error parsing package.json:', parseError);
            return;
        }
        if (!packageJson['prisma-multischema'])
            packageJson['prisma-multischema'] = jsonToAdd['prisma-multischema'];
        fs.writeFile(packageJsonPath, JSON.stringify(packageJson, null, 2), 'utf8', (writeErr) => {
            if (writeErr) {
                console.error('Error writing package.json:', writeErr);
            }
            else {
                console.log('package.json updated successfully.');
            }
        });
    });
};
exports.checkJSON = checkJSON;
const jsonToAdd = {
    "prisma-multischema": {
        "input": [],
        "output": "/prisma/schema.prisma"
    }
};
