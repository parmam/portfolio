"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prismaUnifier = exports.subschemasPath = exports.allSchemaFolder = exports.appRoot = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const colorLogs_1 = require("./utility/colorLogs");
const logger_1 = require("./logger");
const node_process_1 = require("node:process");
const processor_1 = require("./processor");
function getAppRootDir() { return process.cwd(); }
exports.appRoot = getAppRootDir();
exports.allSchemaFolder = '/prisma/subschemas';
exports.subschemasPath = path.join(exports.appRoot, exports.allSchemaFolder);
function genSubschemasPath() {
}
/**
   * @author | joydip007x
   * @desc This is an Utility script that will generate  schema.prisma in '/prisma '
   * @command : npx prisma-unify007x 007x
   * @Test_The_Result : npx prisma studio
   * @structure allSchemaFolder must be a subFolder of Prisma.
    There should not be any '*.prisma' files in '/prisma/' folder except 'schema.prisma'
*/
function prismaUnifier(test_mocha = 0) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        //checkJSON();
        //genSubschemasPath();
        const mainSchemaPrismaPath = path.join(exports.appRoot + '/prisma/schema.prisma');
        if (!test_mocha) {
            console.log('‚è©', colorLogs_1.colorLogs.Bright, 'MainSchema Generation path : ', colorLogs_1.colorLogs.Reset, mainSchemaPrismaPath);
            console.log('‚è∞', colorLogs_1.colorLogs.Bright, 'Searching Sub-Schema\'s in : ', colorLogs_1.colorLogs.Reset, exports.subschemasPath);
        }
        const result = (0, processor_1.getAllFiles)(exports.subschemasPath, []);
        if (!test_mocha) {
            if (result.length < 1) {
                (0, logger_1.errorLogs)(exports.subschemasPath);
                (0, node_process_1.exit)(0);
            }
            console.log('‚úÖ', colorLogs_1.colorLogs.Bright, 'Total No. of Subschemas found: ' + result.length, colorLogs_1.colorLogs.Reset);
            console.log('üëâ', colorLogs_1.colorLogs.Bright, "Sub-Schemas: ", colorLogs_1.colorLogs.Reset);
            for (let i = 0; i < result.length; i++) {
                console.log(colorLogs_1.colorLogs.FgGreen, (_a = result.at(i)) === null || _a === void 0 ? void 0 : _a.slice((_b = result.at(i)) === null || _b === void 0 ? void 0 : _b.indexOf("subschemas")), colorLogs_1.colorLogs.Reset);
            }
        }
        if (fs.existsSync(mainSchemaPrismaPath)) {
            !test_mocha &&
                console.log('‚Ñπ', colorLogs_1.colorLogs.FgRed, 'Deleting Old schema.prisma and Generating New', colorLogs_1.colorLogs.Reset);
            fs.unlinkSync(mainSchemaPrismaPath);
        }
        else {
            !test_mocha &&
                console.log('‚Ñπ', colorLogs_1.colorLogs.FgCyan, 'No Old schema.prisma was present,Generating New', colorLogs_1.colorLogs.Reset);
        }
        var logStream = fs.createWriteStream(mainSchemaPrismaPath, { flags: 'wx' });
        if (!test_mocha)
            logStream.write('//üß©Don\'t Edit this file.‚ú®Generated in ' + new Date() + '‚ú®\n');
        yield (0, processor_1.processSubschemas)(result, logStream);
        if (!test_mocha)
            console.log('üéØ', colorLogs_1.colorLogs.Bright, 'Unified Schema Ready at : ', colorLogs_1.colorLogs.Reset, colorLogs_1.colorLogs.FgBlue, mainSchemaPrismaPath, colorLogs_1.colorLogs.Reset, '\n');
        return mainSchemaPrismaPath;
    });
}
exports.prismaUnifier = prismaUnifier;
